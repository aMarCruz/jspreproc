# extends: 'eslint:recommended'

root: true

env:

    ###########################################################################
    #                                                                         #
    #   ENVIRONMENT: if you write code that will be executed in one of the    #
    #   following environments, the value for that environment should be      #
    #   set to true.                                                          #
    #                                                                         #
    ###########################################################################

    browser: false
    es6: false
    node: true

ecmaFeatures:
    #modules: true
    #blockBindings: true

globals:

    ###########################################################################
    #                                                                         #
    #   GLOBALS: ESLint will assume the following variables are declared      #
    #   globally; other variables will require explicit declaration.          #
    #                                                                         #
    ###########################################################################

    require: true

rules:

    ###########################################################################
    #                                                                         #
    #   POSSIBLE ERRORS: these rules point out areas where you might have     #
    #   made mistakes.                                                        #
    #                                                                         #
    ###########################################################################

    no-console: 0               # disallow use of console
    comma-dangle: 2             # disallow trailing commas in object literals
    no-cond-assign: 2           # disallow assignment in conditional expressions
    no-constant-condition: 2    # disallow use of constant expressions in conditions
    no-control-regex: 2         # disallow control characters in regular expressions
    no-debugger: 2              # disallow use of debugger
    no-dupe-args: 2             # disallow duplicate arguments in functions
    no-dupe-keys: 2             # disallow duplicate keys when creating object literals
    no-duplicate-case: 2        # disallow a duplicate case label
    no-empty-character-class: 2 # disallow the use of empty character classes in regular expressions
    no-empty: 2                 # disallow empty statements
    no-ex-assign: 2             # disallow assigning to the exception in a catch block
    no-extra-boolean-cast: 2    # disallow double-negation boolean casts in a boolean context
    no-extra-parens: 1          # disallow unnecessary parentheses
    no-extra-semi: 2            # disallow unnecessary semicolons
    no-func-assign: 2           # disallow overwriting functions written as function declarations
    no-inner-declarations: 2    # disallow function or variable declarations in nested blocks
    no-invalid-regexp: 2        # disallow invalid regular expression strings in the RegExp constructor
    no-irregular-whitespace: 2  # disallow irregular whitespace outside of strings and comments
    no-negated-in-lhs: 2        # disallow negation of the left operand of an in expression
    no-obj-calls: 2             # disallow the use of object properties of the global object (Math and JSON) as functions
    no-regex-spaces: 1          # disallow multiple spaces in a regular expression literal
    no-sparse-arrays: 2         # disallow sparse arrays
    no-unreachable: 2           # disallow unreachable statements after a return, throw, continue, or break statement
    use-isnan: 2                # disallow comparisons with the value NaN
    valid-jsdoc: [2, { "requireReturn": false }] # ensure JSDoc comments are valid, returns optional in void functions
    valid-typeof: 2             # ensure that the results of typeof are compared against a valid string
    no-unexpected-multiline: 2  # Avoid code that looks like two expressions but is actually one

    ###########################################################################
    #                                                                         #
    #   BEST PRACTICES: these rules are designed to prevent you from making   #
    #   mistakes. They either prescribe a better way of doing something or    #
    #   help you avoid pitfalls.                                              #
    #                                                                         #
    ###########################################################################

    block-scoped-var: 2         # treat var statements as if they were block scoped
    complexity: [1, 9]          # specify the maximum cyclomatic complexity allowed in a program
    consistent-return: 1        # require return statements to either always or never specify values
    curly: 0                    # specify curly brace conventions for all control statements
    default-case: 1             # require default case in switch statements
    dot-notation: 1             # encourages use of dot notation whenever possible
    eqeqeq: [2, "smart"]        # require the use of === and !==
    guard-for-in: 1             # make sure for-in loops have an if statement
    no-alert: 2                 # disallow the use of alert, confirm, and prompt
    no-caller: 2                # disallow use of arguments.caller or arguments.callee
    no-div-regex: 2             # disallow division operators explicitly at beginning of regular expression
    no-else-return: 1           # disallow else after a return in an if
    no-empty-label: 2           # disallow use of labels for anything other then loops and switches
    no-eq-null: 0               # disallow comparisons to null without a type-checking operator
    no-eval: 2                  # disallow use of eval()
    no-extend-native: 2         # disallow adding to native types
    no-extra-bind: 2            # disallow unnecessary function binding
    no-fallthrough: 2           # disallow fallthrough of case statements
    no-floating-decimal: 2      # disallow the use of leading or trailing decimal points in numeric literals
    no-implied-eval: 2          # disallow use of eval()-like methods
    no-iterator: 2              # disallow usage of __iterator__ property
    no-labels: 2                # disallow use of labeled statements
    no-lone-blocks: 2           # disallow unnecessary nested blocks
    no-loop-func: 2             # disallow creation of functions within loops
    #no-multi-spaces: 0         # disallow use of multiple spaces
    no-multi-str: 2             # disallow use of multiline strings
    no-native-reassign: 2       # disallow reassignments of native objects
    no-new: 2                   # disallow use of new operator when not part of the assignment or comparison
    no-new-func: 2              # disallow use of new operator for Function object
    no-new-wrappers: 2          # disallows creating new instances of String,Number, and Boolean
    no-octal: 2                 # disallow use of octal literals
    no-octal-escape: 2          # disallow use of octal escape sequences in string literals
    no-proto: 2                 # disallow usage of __proto__ property
    no-redeclare: 2             # disallow declaring the same variable more then once
    no-return-assign: 2         # disallow use of assignment in return statement
    no-script-url: 2            # disallow use of javascript urls.
    no-self-compare: 2          # disallow comparisons where both sides are exactly the same
    no-sequences: 2             # disallow use of comma operator
    no-unused-expressions: 1    # disallow usage of expressions in statement position
    no-void: 2                  # disallow use of void operator
    no-warning-comments: 0      # disallow usage of configurable warning terms in comments
    no-with: 2                  # disallow use of the with statement
    radix: 2                    # require use of the second argument for parseInt()
    wrap-iife: [2, "inside"]    # require immediate function invocation to be wrapped in parentheses
    yoda: [2, "never"]          # require or disallow Yoda conditions

    ###########################################################################
    #                                                                         #
    #   STRICT MODE: these rules relate to using strict mode.                 #
    #                                                                         #
    ###########################################################################

    #strict: [2, "global"]      # require run in strict mode
    #strict: 2                  # require strict mode

    ###########################################################################
    #                                                                         #
    #   VARIABLES: these rules have to do with variable declarations.         #
    #                                                                         #
    ###########################################################################

    no-catch-shadow: 2          # disallow the catch clause parameter name being the same as a variable in the outer scope
    no-delete-var: 2            # disallow deletion of variables
    no-label-var: 2             # disallow labels that share a name with a variable
    no-shadow: 2                # disallow declaration of variables already declared in the outer scope
    no-shadow-restricted-names: 2 # disallow shadowing of names such as arguments
    no-undef: 2                 # disallow use of undeclared variables unless mentioned in a /*global */ block
    no-undef-init: 1            # disallow use of undefined when initializing variables
    no-undefined: 2             # disallow use of undefined variable
    no-unused-vars: 2           # disallow declaration of variables that are not used in the code
    #no-use-before-define: 0    # disallow use of variables before they are defined

    ###########################################################################
    #                                                                         #
    #   NODE: these rules relate to functionality provided in Node.js.        #
    #                                                                         #
    ###########################################################################

    handle-callback-err: 1      # enforces error handling in callbacks
    no-mixed-requires: 2        # disallow mixing regular variable and require declarations
    no-new-require: 1           # disallow use of new operator with the require function
    no-path-concat: 2           # disallow string concatenation with __dirname and __filename
    #no-process-exit: 0         # disallow process.exit()
    #no-restricted-modules: 0   # restrict usage of specified node modules
    #no-sync: 0                 # disallow use of synchronous methods

    ###########################################################################
    #                                                                         #
    #   STYLISTIC ISSUES: these rules are purely matters of style and,        #
    #   while valueable to enforce consistently across a project, are         #
    #   quite subjective.                                                     #
    #                                                                         #
    ###########################################################################

    linebreak-style: [2, "unix"]

    indent: [2, 2, { "SwitchCase": 1, "VariableDeclarator": 2 }] # Set a specific tab width
    brace-style: [1, "stroustrup", { "allowSingleLine": true }] # enforce stroustrup brace style
    camelcase: [2, { "properties": "always" } ] # require camel case names
    comma-spacing: 2                # enforce spacing before and after comma
    comma-style: 2                  # enforce one true comma style
    consistent-this: 1              # enforces consistent naming when capturing the current execution context
    eol-last: 2                     # enforce newline at the end of file, with no multiple empty lines
    #func-names: 1                  # require function expressions to have a name
    func-style: 0                   # enforces use of function declarations or expressions
    key-spacing: 0                  # enforces spacing between keys and values in object literal properties
    max-nested-callbacks: [2, 4]    # specify the maximum depth callbacks can be nested
    new-cap: 1                      # require a capital letter for constructors
    new-parens: 2                   # disallow the omission of parentheses when invoking a constructor with no arguments
    no-array-constructor: 1         # disallow use of the Array constructor
    no-lonely-if: 1                 # disallow if as the only statement in an else block
    no-mixed-spaces-and-tabs: 2     # disallow mixed spaces and tabs for indentation
    #no-nested-ternary: 0           # disallow nested ternary expressions
    no-new-object: 2                # disallow use of the Object constructor
    no-spaced-func: 2               # disallow space between function identifier and application
    no-trailing-spaces: 2           # disallow trailing whitespace at the end of lines
    no-extra-parens: 2              # disallow wrapping of non-IIFE statements in parens
    #padded-blocks: 0               # enforce padding within blocks
    quote-props: [2, "as-needed"]   # require quotes around object literal property names only if needed
    quotes: [1, "single", "avoid-escape"]  # specify whether double or single quotes should be used
    semi: [2, "never"]              # require or disallow use of semicolons instead of ASI
    #semi-spacing: [2, { "before": false, "after": true }] # disallow space before semicolon, require after
    space-after-keywords: [2, "always"] # require a space after certain keywords
    space-before-blocks: 2          # require or disallow space before blocks
    space-before-function-paren: [2, { "anonymous": "always", "named": "never" }]
    #space-in-brackets: 0           # require or disallow spaces inside brackets
    #space-in-parens: 0             # require or disallow spaces inside parentheses
    space-infix-ops: 1              # require spaces around operators
    space-return-throw-case: 2      # require a space after return, throw, and case
    #wrap-regex: 0                  # require regex literals to be wrapped in parentheses
